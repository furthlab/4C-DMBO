3+4
4+5
3+4
4+5
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/script_for_r_book.r", echo=TRUE)
clear
cls
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/script_for_r_book.r", echo=TRUE)
log10(20)
log10(20)
# Ex 2.4
# 14
(2 * sqrt((21-3) + sqrt(60) + 4^2)) /
(sqrt(8-(7/2)))
# Ex 2.4
# 14
(2 * sqrt((21-3) + sqrt(60) + 4^2)) /
(sqrt(8-(7/2)))
3^2 + 5^2 + 11^2 + 8^2
# Ex 2.10
(1 / sqrt(2 * (1.5^2) * pi)) *
exp(-0.5 * ((0.5-2) / (1.5))^2)
# Ex 2.12
10.4 + (40/10) + 6
# Ex 2.12
10.4 + (40/10) + 6
# Ex 2.12
10.4 + 40
# Ex 2.12
10.4 + 40/
10 + 6
mean(results)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/Untitled1.R", echo=TRUE)
median(results)
sd(results)
max(results) - min (results)
# Ex 2.15
(4 * 5 * 6 * 8)^(1/4)
# Ex 3.2
x <- c(8, 30, 3, 4, 2, 5, 8, 5)
y <- c(3, 7, 4, 8, 3, 1, 11, 2)
10 * x + (7 * y) * (3 * x)
10 * x + (7 * y) * (3 * x)
(12 * x + 13 * y) * (24 * x - 3 * y)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
View(df)
View(df)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
View(df_new)
View(df_new)
barplot(pulse)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
as.character(leftright)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
# 4.3
length(leftright)
counties <- rep(NA, length(leftright))
leftright_ABCDE[leftright == "clearly to the left"] <- "A"
leftright_ABCDE[leftright == "somewhat to the left"] <- "B"
leftright_ABCDE[leftright == "neither to the left nor to the right"] <- "C"
leftright_ABCDE[leftright == "somewhat to the right"] <- "D"
leftright_ABCDE[leftright == "clearly to the right"] <- "E"
print(leftright_ABCDE)
# 4.4
leftright_num <- as.numeric(rep(NA, length(leftright_ABCDE)))
print(leftright_num)
str(leftright_num)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
mean(leftright_num)
# 4.5
factor(leftright_num)
source("~/Library/CloudStorage/Dropbox/Dokument/PhD/Courses/Introduction to biostatistics/241002.r", echo=TRUE)
?c
na.omit(leftright_choice)
test <- na.omit(leftright_choice)
str(test)
str(leftright_choice)
test <- na.omit(leftright_choice)
str(test)
test <- na.omit(leftright_choice)
test <- na.omit(leftright_choice)
test <- na.omit(leftright_choice)
leftright_ABCDE[2]
leftright_choice_forloop <- c()
for (i in 1:length(leftright_ABCDE)) {
print(i)
if (leftright_ABCDE == "A" | leftright_ABCDE == "B") {
leftright_choice[i] <- "left"
}
}
for (i in 1:length(leftright_ABCDE)) {
print(i)
if (leftright_ABCDE == "A" | leftright_ABCDE == "B") {
leftright_choice[i] <- "left"
}
}
for (i in 1:length(leftright_ABCDE)) {
print(i)
if (leftright_ABCDE == "A") {
leftright_choice[i] <- "left"
}
}
leftright_choice_forloop <- c()
for (i in 1:length(leftright_ABCDE)) {
print(i)
if (leftright_ABCDE[i] == "A" | leftright_ABCDE[i] == "B") {
leftright_choice[i] <- "left"
print("left")
}
}
for (i in 1:length(leftright_ABCDE)) {
#print(i)
if (leftright_ABCDE[i] == "A" | leftright_ABCDE[i] == "B") {
leftright_choice[i] <- "left"
} else if (leftright_ABCDE[i] == "D" | leftright_ABCDE[i] == "E") {
leftright_choice[i] <- "right"
}
}
str(leftright_choice_forloop)
print(leftright_choice_forloop)
leftright_choice_forloop <- c()
for (i in 1:length(leftright_ABCDE)) {
#print(i)
if (leftright_ABCDE[i] == "A" | leftright_ABCDE[i] == "B") {
append(leftright_choice_forloop, "left")
} else if (leftright_ABCDE[i] == "D" | leftright_ABCDE[i] == "E") {
append(leftright_choice_forloop, "right")
}
}
print(leftright_choice_forloop)
leftright_choice_forloop <- c()
print(leftright_choice_forloop)
leftright_choice_forloop <- c()
print(leftright_choice_forloop)
for (i in 1:length(leftright_ABCDE)) {
if (leftright_ABCDE[i] == "A" | leftright_ABCDE[i] == "B") {
print("yay")
append(leftright_choice_forloop, "left")
} else if (leftright_ABCDE[i] == "D" | leftright_ABCDE[i] == "E") {
print("nay")
append(leftright_choice_forloop, "right")
}
}
print(leftright_choice_forloop)
leftright_choice_forloop <- c()
print(leftright_choice_forloop)
for (i in 1:length(leftright_ABCDE)) {
if (leftright_ABCDE[i] == "A" | leftright_ABCDE[i] == "B") {
print("yay")
leftright_choice_forloop <- append(leftright_choice_forloop, "left")
} else if (leftright_ABCDE[i] == "D" | leftright_ABCDE[i] == "E") {
print("nay")
leftright_choice_forloop <- append(leftright_choice_forloop, "right")
}
}
print(leftright_choice_forloop)
students <- c(23, 24, 21, 34, 43, "class room closed for refurbishing", 34, 22).
students <- c(23, 24, 21, 34, 43, "class room closed for refurbishing", 34, 22).
students <- c(23, 24, 21, 34, 43, NA, 34, 22).
typeof(students)
students <- c(23, 24, 21, 34, 43, NA, 34, 22).
students <- c(23, 24, 21, 34, 43, NA, 34, 22).
typeof(students)
students <- c(23, 24, 21, 34, 43, "class room closed for refurbishing", 34, 22)
typeof(students)
students_int <- as.integer(students)
print(students_int)
# 4.3
postcode <- int()
dir('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO\ kinetics\ 250722\ \(Andreas\)/BioDrop\ Samples/')
dir('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO kinetics 250722  (Andreas )/BioDrop Samples/')
dir('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO_kinetics_250722_Andreas/')
dir('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO_kinetics_250722_Andreas/Bio_Samples')
dir('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO_kinetics_250722_Andreas/Bio_Samples/data')
dir('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO_kinetics_250722_Andreas/')
data<-read.table('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO_kinetics_250722_Andreas/BioDrop_Samples/data/DBCO_100mM_250722.csv', header=T, skip=15, sep=',')
data<-read.table('/Users/alfred/Library/CloudStorage/Dropbox/Dokument/PhD/Experiments/DBCO_kinetics_250722_Andreas/BioDrop_Samples/data/DBCO_100mM_250722.csv', header=T, skip=15, sep=',')
plot(data$Time.s., data$Absorbance, type='l', ylab='Absorbance (307 nm)', xlab='Time (sec.)', las=1,lwd=2)
# Estimate initial parameters
A0_start <- max(data$Absorbance) - min(data$Absorbance)
k_start <- 0.001  # guess based on timescale
Ainf_start <- min(data$Absorbance)
# Fit pseudo-first-order kinetics
fit <- nls(Absorbance ~ A0 * exp(-k * Time.s.) + Ainf,
data = data,
start = list(A0 = A0_start, k = k_start, Ainf = Ainf_start))
# Summary of fit
summary(fit)
# Add fitted curve to the plot
lines(data$Time.s., predict(fit), col='red', lwd=2)
legend("topright", legend=c("Data", "Fit"), col=c("black", "red"), lwd=2)
summary(fit)$coefficients
k <- summary(fit)$coefficients["k", "Estimate"]
print(k)
# Assuming you have a folder with all the data.
#' Extract Pseudo-First-Order Rate Constants from UV-Vis Data
#'
#' This function loops through all `.csv` files in a given folder,
#' fits a pseudo-first-order exponential decay model to UV-Vis absorbance data,
#' and extracts the fitted rate constant \eqn{k} from each file.
#'
#' The model fitted is: \deqn{A(t) = A_0 \cdot e^{-k t} + A_{\infty}}
#'
#' The data files are assumed to have a common format:
#' - CSV file
#' - First 15 lines skipped
#' - Columns named `Time.s.` and `Absorbance`
#'
#' @param folder_path Character string. Path to the folder containing the `.csv` data files.
#'
#' @return A data frame with columns:
#' \describe{
#'   \item{File}{Name of the file}
#'   \item{k}{Estimated pseudo-first-order rate constant}
#' }
#'
#' @examples
#' \dontrun{
#' # Extract rate constants from all UV-Vis traces in folder
#' k_results <- extract_k_values("raw-data/UV-Vis/")
#' print(k_results)
#' }
#'
#' @importFrom stats nls coef
#' @export
extract_k_values <- function(folder_path) {
# List all CSV files in the folder
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# Initialize results list
results <- data.frame(File = character(), k = numeric(), stringsAsFactors = FALSE)
for (file in files) {
# Read the data (skip header lines and assume same format)
data <- tryCatch({
read.table(file, header = TRUE, skip = 15, sep = ",")
}, error = function(e) return(NULL))
if (is.null(data) || !"Time.s." %in% names(data) || !"Absorbance" %in% names(data)) next
# Estimate initial parameters
A0_start <- max(data$Absorbance) - min(data$Absorbance)
k_start <- 0.001
Ainf_start <- min(data$Absorbance)
# Fit the model
fit <- tryCatch({
nls(Absorbance ~ A0 * exp(-k * Time.s.) + Ainf,
data = data,
start = list(A0 = A0_start, k = k_start, Ainf = Ainf_start),
control = nls.control(warnOnly = TRUE))
}, error = function(e) return(NULL))
# Extract k value if fitting succeeded
if (!is.null(fit)) {
k_value <- summary(fit)$coefficients["k", "Estimate"]
results <- rbind(results, data.frame(File = basename(file), k = k_value))
}
}
return(results)
}
k_results <- extract_k_values("raw-data/UV-Vis/")
print(k_results)
# Molarity of azide across conditions
molarity <- c(0.03, 0.04, 0.05, 0.10, 0.15)  # in M
# Ensure k_results is a numeric vector of the same length
k_values <- k_results$k
# Simulate pseudo-first-order rate constants with some noise
#set.seed(42)  # for reproducibility
#true_k2 <- 25  # M^-1 s^-1
#k_values <- true_k2 * molarity + rnorm(length(molarity), mean = 0, sd = 0.5)
# Plot pseudo-first-order rate constants vs azide concentration
plot(molarity, k_values,
xlab = "[Azide] (M)", ylab = expression(k[obs]~"(" * s^{-1} * ")"),
pch = 16, las = 1, col = "blue", main = "Second-order kinetics fit")
source("~/Documents/GitHub/4c_DMBO_comment/data/4C-DMBO_pseudokinetics.R", echo=TRUE)
getwd()
setwd("/Users/alfred/Documents/GitHub/4c_DMBO_comment/data"")
s
source("~/Documents/GitHub/4c_DMBO_comment/data/4C-DMBO_pseudokinetics.R", echo=TRUE)
setwd("/Users/alfred/Documents/GitHub/4c_DMBO_comment/data")
source("~/Documents/GitHub/4c_DMBO_comment/data/4C-DMBO_pseudokinetics.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/4C-DMBO_pseudokinetics.R", echo=TRUE)
getwd()
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics_drift.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics_drift.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics_drift.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics_drift.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics_drift.R", echo=TRUE)
source("~/Documents/GitHub/4c_DMBO_comment/data/DBCO_pseudokinetics_drift.R", echo=TRUE)
